import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import dayjs from 'dayjs';
import './MatchView.css';
const MODE_LABEL = {
    0: 'None', 1: 'All Pick', 2: "Captain's Mode", 3: 'Random Draft',
    4: 'Single Draft', 5: 'All Random', 6: 'Intro', 7: 'Diretide',
    8: "Reverse Captain's Mode", 9: 'The Greeviling', 10: 'Tutorial',
    11: 'Mid Only', 12: 'Least Played', 13: 'New Player Pool',
    14: 'Compendium', 15: 'Co-op vs Bots', 16: 'Captains Draft',
    18: 'Ability Draft', 20: 'All Random Deathmatch',
    21: '1v1 Mid Only',19:'Unknown', 22: 'Ranked / All Pick', 23: 'Turbo'
};

const RADIANT_ICON = 'https://cdn.stratz.com/images/dota2/radiant_square.png';
const DIRE_ICON    = 'https://cdn.stratz.com/images/dota2/dire_square.png';

export default function MatchView() {
    const { matchId } = useParams();
    const navigate    = useNavigate();

    const [match,  setMatch]  = useState(null);
    const [heroes, setHeroes] = useState({});
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        Promise.all([
            axios.get(`/api/matches/${matchId}`),
            axios.get('/api/heroes'),
        ])
            .then(([mRes, hRes]) => {
                setMatch(mRes.data);
                const map = {};
                hRes.data.forEach(h => (map[h.hero_id] = h));
                setHeroes(map);
            })
            .catch(console.error)
            .finally(() => setLoading(false));
    }, [matchId]);

    if (loading) return <div className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶</div>;
    if (!match)   return <div className="error">–ú–∞—Ç—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</div>;

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    const {
        players = [],
        radiantWin,
        radiant_score,
        dire_score,
        startTime,
        durationSec,
        game_mode,
    } = match;
    /* ‚îÄ‚îÄ‚îÄ –¥–µ–Ω—å/–Ω—ñ—á —É Dota 2: –ø–µ—Ä—à–∞ —Ñ–∞–∑–∞ ‚Äî –Ω—ñ—á, –ø–æ—Ç—ñ–º –º—ñ–Ω—è—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤  */
    const phaseIdx   = Math.floor(match.durationSec / 300);   // 0‚Äí299 c, 300‚Äí599 c ‚Ä¶
    const isNight    = phaseIdx % 2 === 0;                    // –ø–∞—Ä–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ ‚Äî –¥–µ–Ω—å
    const phaseIcon  = isNight ? 'üåû' : 'üåô';
    const phaseLabel = isNight ? '–î–µ–Ω—å'  : '–ù—ñ—á';
    const radiantCap = players.filter(p => p.radiant)
        .reduce((s,p)=>s+p.net_worth,0);
    const direCap    = players.filter(p => !p.radiant)
        .reduce((s,p)=>s+p.net_worth,0);

    const modeTitle  = MODE_LABEL[game_mode] ?? 'Unknown';

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ render ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    return (
        <div className="match-view-container">

            {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HEADER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
            <header className="match-topbar">

                {/* Radiant */}
                <div className="team-box radiant">
                    <img className="team-logo" src={RADIANT_ICON} alt="Radiant"/>
                    <div className="team-name">–°—è–π–≤–æ</div>
                    <span className={`team-result ${radiantWin ? 'win' : 'lose'}`}>
            {radiantWin ? '–ü–µ—Ä–µ–º–æ–≥–∞' : '–ü–æ—Ä–∞–∑–∫–∞'}
          </span>
                    <div className="team-cap">üí∞ {radiantCap.toLocaleString()}</div>
                </div>

                {/* Center score block */}
                <div className="score-box">
                <div className="score-stat">
                    <span className="score-num">{radiant_score}</span>
                    <span className="score-icon" title={phaseLabel}>{phaseIcon}</span>
                    <span className="score-num">{dire_score}</span>
                </div>
                <div className="score-info">
                    <div className="match-time">{Math.floor(durationSec/60)}:{String(durationSec%60).padStart(2,'0')}</div>
                    <div className="match-mode">{modeTitle}</div>
                    <div className="match-datetime">
                        {dayjs(startTime).format('D MMM YYYY, HH:mm')}
                    </div>
                </div>
                </div>

                {/* Dire */}
                <div className="team-box dire">
                    <img className="team-logo" src={DIRE_ICON} alt="Dire"/>
                    <div className="team-name">–ü—ñ—Ç—å–º–∞</div>
                    <span className={`team-result ${!radiantWin ? 'win' : 'lose'}`}>
            {!radiantWin ? '–ü–µ—Ä–µ–º–æ–≥–∞' : '–ü–æ—Ä–∞–∑–∫–∞'}
          </span>
                    <div className="team-cap">üí∞ {direCap.toLocaleString()}</div>
                </div>

            </header>

            {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PLAYER CARDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
            <div className="opposition-grid">
                <div className="team-column">
                    {players.filter(p => p.radiant).map(p =>
                        <PlayerCard key={p.id} hero={heroes[p.heroId]} player={p} isRadiant />
                    )}
                </div>

                <div className="vs-column">VS</div>

                <div className="team-column">
                    {players.filter(p => !p.radiant).map(p =>
                        <PlayerCard key={p.id} hero={heroes[p.heroId]} player={p} />
                    )}
                </div>
            </div>
        </div>
    );
}
/** –ü–æ–∫–∞–∑—É—î —Ä—ñ–≤–µ–Ω—å —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞ + –∫—Ä—É–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É (1‚Äí30). */
function LevelBadge({ level }) {
    const pct = Math.min(level, 30) / 30;             // 0‚Äí1
    const deg = pct * 360;                            // 0‚Äí360¬∞
    const style = {
        background: `conic-gradient(#4cc26e ${deg}deg, #2b2b2b 0deg)`,
    };
    return (
        <div className="level-badge" style={style}>
            <span>{level}</span>
        </div>
    );
}

function PlayerCard({ player, hero, isRadiant }) {
    return (
        <div className={`player-card ${isRadiant ? 'radiant' : 'dire'}`}>
            <div className="player-header playerHeader">
                 {/* –±–ª–æ–∫ –∑ –∞–≤–æ—é —Ç–∞ —ñ–º‚Äô—è–º –≥–µ—Ä–æ—è/–∞–∫–∞—É–Ω—Ç–∞ (–∑–ª—ñ–≤–∞) */}
                 <div className="player-info">
                     <div className="hero-portrait">
                         <img src={`https://cdn.cloudflare.steamstatic.com${hero?.img_portrait}`} alt={hero?.name_loc}/>
                         {player.networthDelta > 0 && (
                             <div className="networth-delta">+{player.networthDelta}</div>
                         )}
                     </div>
                     <div className="info-text">
                         <div className="player-hero-name">{hero?.name_loc || hero?.name_en}</div>
                         <div className="player-account">{player.accountName}</div>
                     </div>
                 </div>

                {/* –±–µ–π–¥–∂ —Ä—ñ–≤–Ω—è —Ç–µ–ø–µ—Ä –æ–∫—Ä–µ–º–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø—Ä–∞–≤–∞ */}
                <LevelBadge level={player.level}/>
            </div>
            <div className="player-stats">
                <div className="stat-item">
                    <div className="stat-label">–í / –° / –ü</div>
                    <div className="stat-value">
                        {player.kills} / {player.deaths} / {player.assists}
                    </div>
                </div>
                <div className="stat-item">
                    <div className="stat-label">–ó–ó–• / –î–ó–•</div>
                    <div className="stat-value">
                        {player.gpm} / {player.xpm}
                    </div>
                </div>
                <div className="stat-item">
                    <div className="stat-label">–ö–∞–ø—ñ—Ç–∞–ª</div>
                    <div className="stat-value">{player.net_worth}</div>
                </div>
                <div className="stat-item">
                    <div className="stat-label">–®–ì / –®–ë / –õ–ì</div>
                    <div
                        className="stat-value">{player.hero_damage} / {player.tower_damage} / {player.hero_healing}</div>
                </div>
                <div className="stat-item">
                    <div className="stat-label">–û–£ / –î–ö</div>
                    <div className="stat-value">
                        {player.last_hits} / {player.denies}
                    </div>
                </div>
            </div>
            {/* ‚îÄ‚îÄ‚îÄ ITEMS ‚îÄ‚îÄ‚îÄ */}
            <div className="items-wrap">
                <div className="items-grid">
                    {Array.from({length: 6}).map((_, idx) => {
                        const it = player.items?.find(i => i.slotIndex === idx);
                        return it ? (
                            <div key={idx} className="item-wrapper">
                                <img
                                    className="item-icon"
                                    src={`https://cdn.cloudflare.steamstatic.com${it.imgIcon}`}
                                    alt={it.name}
                                />
                                <div className="item-tooltip">
                                    <strong>{it.name}</strong>
                                    <br/>
                                    {it.description}
                                </div>
                            </div>
                        ) : (
                            <div key={idx} className="item-empty"/>
                        );
                    })}
                </div>
            </div>
        </div>
    );
}
